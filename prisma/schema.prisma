generator client {
   provider = "prisma-client-js"
 }
 
 datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
 }
 
 model User {
   id              String   @id @default(uuid())
   firstName       String
   lastName        String?
   password        String   @default("")
   email           String?   @unique
   phone           String?   @unique
   ageRange        String?
   location        String?
   isAdmin         Boolean  @default(false)
   isLoggedinonce  Boolean  @default(false)
   createdAt       DateTime @default(now())
   updatedAt       DateTime @updatedAt
 
   enrollments     Enrollment[]
 
   
   coursesTaught Course[] @relation("InstructorCourses")
 
   
   progress Progress[] @relation("UserProgress")
   reviews   Review[]
 }
 
 model Course {
   id            String     @id @default(uuid())
   title         String
   description   String
   thumbnail     String
   courseContents String[]
   price         Float // 0 for free courses
   instructor    User       @relation(name: "InstructorCourses", fields: [instructorId], references: [id])
   instructorId  String
   category      Category   @relation(fields: [categoryId], references: [id])
   categoryId    String
   videos        Videos[]
   enrollments    Enrollment[]
   reviews       Review[]
   progress      Progress[] 
   createdAt     DateTime   @default(now())
   updatedAt     DateTime   @updatedAt
 }
 
 model Enrollment {
   id         String   @id @default(uuid())
   user       User     @relation(fields: [userId], references: [id])
   userId     String
   course     Course   @relation(fields: [courseId], references: [id])
   courseId   String
   enrolledAt DateTime @default(now())
 
   @@unique([userId, courseId]) // Ensures a user can't enroll in the same course multiple times
 }
 
 model Videos {
   id             String   @id @default(uuid())
   title          String
   videoThumbnail String
   videoUrl       String
   demoVideourl   String   @default("")
   audioUrl       String
   demoAudiourl   String   @default("")
   course         Course   @relation(fields: [courseId], references: [id])
   courseId       String
   createdAt      DateTime @default(now())
 
  
   progress Progress[] @relation("VideoProgress")
 }
 
 model Category {
   id      String   @id @default(uuid())
   name    String   @unique
   courses Course[]
 }
 
 model Review {
   id        String   @id @default(uuid())
   user      User     @relation(fields: [userId], references: [id])
   userId    String
   rating    Int // 1 to 5
   createdAt DateTime @default(now())
   Course    Course?  @relation(fields: [courseId], references: [id])
   courseId  String?
 }
 
 model Progress {
   id String @id @default(uuid())
 
   user   User   @relation(name: "UserProgress", fields: [userId], references: [id])
   userId String
 
   video   Videos @relation(name: "VideoProgress", fields: [videoId], references: [id])
   videoId String
 
   completed   Boolean   @default(false)
   completedAt DateTime?
   Course      Course?   @relation(fields: [courseId], references: [id])
   courseId    String?
 }
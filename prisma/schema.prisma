generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String?
  password       String   @default("")
  email          String?  @unique
  phone          String?  @unique
  ageRange       String?
  location       String?
  isAdmin        Boolean  @default(false)
  isLoggedinonce Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  enrollments   Enrollment[]
  coursesTaught Course[]      @relation("InstructorCourses")
  progress      Progress[]    @relation("UserProgress")
  reviews       Review[]
  certificates  Certificate[]
  communityMemberships CommunityMember[]
}

model Course {
  id             String        @id @default(uuid())
  title          String
  description    String
  thumbnail      String
  courseContents String[]
  price          Float
  instructor     User          @relation(name: "InstructorCourses", fields: [instructorId], references: [id])
  instructorId   String
  category       Category      @relation(fields: [categoryId], references: [id])
  categoryId     String
  videos         Videos[]
  enrollments    Enrollment[]
  reviews        Review[]
  progress       Progress[]
  test           Test?
  community      Community?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Certificate    Certificate[]
}

model Test {
  id        String     @id @default(uuid())
  courseId  String     @unique
  course    Course     @relation(fields: [courseId], references: [id])
  questions Question[]
}

model Question {
  id         String   @id @default(uuid())
  testId     String
  test       Test     @relation(fields: [testId], references: [id])
  text       String
  options    String[] @default([]) // Stores 4 options
  correctAnswer String // Must match one of the options
  challenge  Challenge?
}

model Challenge {
  id          String   @id @default(uuid())
  questionId  String   @unique
  question    Question @relation(fields: [questionId], references: [id])
  description String
}

model Certificate {
  id       String   @id @default(uuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])
  issuedAt DateTime @default(now())
}

model Enrollment {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  enrolledAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Videos {
  id             String   @id @default(uuid())
  title          String
  videoThumbnail String
  videoUrl       String
  demoVideourl   String   @default("")
  videoSteps     String[]
  audioUrl       String
  demoAudiourl   String   @default("")
  course         Course   @relation(fields: [courseId], references: [id])
  courseId       String
  createdAt      DateTime @default(now())

  progress Progress[] @relation("VideoProgress")
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  createdAt DateTime @default(now())
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?
}

model Progress {
  id          String    @id @default(uuid())
  user        User      @relation(name: "UserProgress", fields: [userId], references: [id])
  userId      String
  video       Videos    @relation(name: "VideoProgress", fields: [videoId], references: [id])
  videoId     String
  completed   Boolean   @default(false)
  completedAt DateTime?
  course      Course?   @relation(fields: [courseId], references: [id])
  courseId    String?
}

model Community {
  id       String          @id @default(uuid())
  courseId String          @unique
  communityName String     @default("")
  course   Course          @relation(fields: [courseId], references: [id])
  members  CommunityMember[]
}

model CommunityMember {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  joinedAt    DateTime  @default(now())

  @@unique([userId, communityId]) // Ensures a user joins a community only once
}
